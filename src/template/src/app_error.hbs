{{#if is_web_site}}
use salvo::{
    async_trait,
    http::ParseError,
    prelude::{EndpointOutRegister, StatusCode},
    writing::Json,
    Depot, Request, Response, Writer,
};
{{else}}
use salvo::{
    async_trait,
    http::ParseError,
    prelude::EndpointOutRegister,
    writing::Json,
    Depot, Request, Response, Writer,
};
{{/if}}
use thiserror::Error;

#[derive(Error, Debug)]
pub enum AppError {
    #[error("error:`{0}`")]
    AnyHow(#[from] anyhow::Error),
    #[error("http::ParseError:`{0}`")]
    ParseError(#[from] ParseError),
    {{#if is_sqlx}}
    #[error("sqlx::Error:`{0}`")]
    SqlxError(#[from] sqlx::Error),
    {{/if}}
    {{#if is_sea_orm}}
    #[error("sea_orm::DbErr:Error:`{0}`")]
    DbErr(#[from] sea_orm::DbErr),
    {{/if}}
    {{#if is_diesel}}
    #[error("diesel::result::Error:`{0}`")]
    DieselErr(#[from] diesel::result::Error),
    {{/if}}
}

pub type AppResult<T> = Result<T, AppError>;

#[async_trait]
impl Writer for AppError {
    async fn write(mut self, _req: &mut Request, _depot: &mut Depot, res: &mut Response) {
        {{#if is_web_site}}
        res.stuff(StatusCode::INTERNAL_SERVER_ERROR, Json(self.to_string()));
        {{else}}
        res.render(Json(self.to_string()));
        {{/if}}
    }
}

impl EndpointOutRegister for AppError {
    fn register(_components: &mut salvo::oapi::Components, operation: &mut salvo::oapi::Operation) {
        operation
            .responses
            .insert("500".to_string(), salvo::oapi::Response::new("error"));
    }
}
