{{#if need_db_conn}}
use crate::middleware::jwt::jwt_hoop;
{{/if}}
use salvo::{
    prelude::{CatchPanic, Logger, OpenApi, SwaggerUi},
    Router,
};
use self::{
    demo::hello,
{{#if need_db_conn}}
{{#if is_web_site}}
    user::{
        delete_user,login_page, post_add_user, post_login, post_update_user,
        user_list_page,
    },
{{else}}
    user::{
        delete_user, get_users, post_add_user, post_login, post_update_user,
    },
{{/if}}
{{/if}}
};
pub mod demo;
{{#if need_db_conn}}
pub mod user;
{{/if}}

pub fn router() -> Router {
    {{#if is_web_site}}
    {{#if need_db_conn}}
    let mut no_auth_routers = vec![
        Router::with_path("login").get(login_page),
        Router::with_path("/api/login").post(post_login),
    ];

    let mut need_auth_routers = vec![
        Router::with_path("users")
        .post(post_add_user)
        .get(user_list_page),
        Router::with_path("/api/users")
            .get(get_users)
            .put(post_update_user)
            .push(Router::with_path("<id>").delete(delete_user)),
    ];
    let router = Router::new()
        .hoop(Logger::new())
        .hoop(CatchPanic::new())
        .get(hello)
        .append(&mut no_auth_routers)
        .push(
            Router::new()
                .append(&mut need_auth_routers)
                .hoop(jwt_hoop()),
        );
    {{/if}}
    {{/if}}
    let doc = OpenApi::new("salvo web api", "0.0.1").merge_router(&router);
    router
        .push(doc.into_router("/api-doc/openapi.json"))
        .push(SwaggerUi::new("/api-doc/openapi.json").into_router("swagger-ui"))
}